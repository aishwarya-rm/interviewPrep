A binary search tree is a data structure such that an in order traversal would
result in a sorted list.

A binary search tree will have O(log n) finds, and O(log n) inserts, but delete can
be a tougher problem. It would be kind of messy to have many deletes in a binary tree,
so a better way of doing them is to just mark nodes as deleted and then even though
insert and delete would be slightly worse, it's not too bad.

However, we still have one problem. If we deleted consistently, we would have to make
sure that this tree stays a binary search tree, otherwise insert and find would
actually be messed up. There isn't a really great balancing condition to ensure that
this BST remains a BST, so why don't we consider an AVL? See AVL notes ;)
