A heap is a great way of ordering elements and implementing a Priority Queue
A Priority Queue has a couple of methods that are important: insert(), findMin(), delete()


Heap:
- A heap is structured in a way such that the top element is the smallest number
- In the case of the max heap, the top element is the largest number
- Every number below this node is greater (opposite for a max heap)


Insert:
- Insert at the next open spot in the heap (it's in the last row on the right)
- Then, you have to percolate up, which is when you reset the order of the Heap
- Percolate up:
  - while this node is greater than the parent node, switch this node with the parent node

FindMin:
- Just get the top element from a heap.

Delete:
- Usually done right after findMin, delete the element at the top
- replace it with the last element in the Heap
- then percolate down
  - while the current element is greater than either child
  - switch the current element with the smaller child

How to build a heap:
- There are two ways to build a heap. If we implement this buildHeap method without knowing the internals of the data structure, we can
do it in O(nlog(n)) time. This would be just by doing n insert operations.
- There is also another method, Floyd's buildHeap. This works by inserting all the elements into the heap and only doing percolateDown at
the very end. This would take amortized O(n) time.

With the array implementation of a Heap, we can access parent and children nodes as follows:
- Parent = (n-1) /2
- Left Child = 2n + 1
- Right Child = 2n + 2
